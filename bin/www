#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const cluster = require('cluster');
const debug = require('debug')('pos:server');
const http = require('http');
const numCPUs = require('os').cpus().length;

let server;
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.APP_PORT || '3000');
app.set('port', port);

if (cluster.isMaster) {
  // Fork workers.
  for (let i = 0; i < numCPUs; i++)
    cluster.fork();


  // If a worker dies, log it to the console and start another worker.
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died.`);
    cluster.fork();
  });

  // Log when a worker starts listening
  cluster.on('listening', (worker, address) => {
    console.log(`Worker started with PID ${worker.process.pid}.`);
  });
} else {
  /**
	 * Create HTTP server.
	 */

  server = http.createServer(app);

  /**
	 * Listen on provided port, on all network interfaces.
	 */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

// The rest of the bin/www file.....

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port))
  // named pipe
    return val;


  if (port >= 0)
  // port number
    return port;


  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen')
    throw error;


  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Listening on ${bind}`);
}

